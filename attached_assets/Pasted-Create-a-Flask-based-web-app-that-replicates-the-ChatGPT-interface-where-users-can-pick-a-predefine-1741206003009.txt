Create a Flask-based web app that replicates the ChatGPT interface, where users can pick a predefined question, and the app responds conversationally.

Requirements:

    Backend: Flask (Python)
    Frontend: HTML, CSS, and JavaScript
    Chat Interface:
        Users select a predefined prompt from categories like Excel, Python, SQL, VBA, etc.
        The system responds in a conversational format, like ChatGPT.
        Users can type follow-up questions, and the system will continue the conversation based on the context.
    Categories & Predefined Prompts:
        üìä Excel Help
            "How do I use VLOOKUP in Excel?"
            "How do I use INDEX/MATCH instead of VLOOKUP?"
            "How can I create a pivot table?"
        üìù VBA Macros
            "How do I write a VBA macro to autofill data?"
            "How can I loop through rows in VBA?"
            "How do I trigger a macro when a cell changes?"
        üêç Python Scripting
            "How do I read an Excel file using pandas?"
            "How do I automate a web task using Playwright?"
            "How do I create a simple API in Flask?"
        üõ¢ SQL Queries
            "How do I join two tables in SQL?"
            "How do I write a query to find duplicate values?"
            "How can I optimize slow queries?"
        üîç Regex Patterns
            "How do I validate an email with regex?"
            "How do I extract numbers from a string?"
        üåê API & JSON
            "How do I send a POST request in Python?"
            "How do I parse JSON in JavaScript?"
        üèó Web Development
            "How do I create a responsive navbar?"
            "How do I fetch data from an API in JavaScript?"
        üîß Linux Commands
            "How do I find and replace text in files using sed?"
            "How do I check system resource usage?"
    User Experience & UI:
        The interface should look like ChatGPT, with a text-based chat area.
        Users can select predefined prompts or type their own questions.
        The app responds in a conversational format, with follow-up suggestions.
        If the user asks for examples, the system extends the conversation dynamically.
    Functionality:
        Use Flask for backend logic and handling responses.
        Use JavaScript (Fetch API) for frontend interaction (updating responses without page reload).
        Include a typing effect to simulate real-time AI responses.
        Allow users to copy responses easily.
    Deployment:
        Ensure minimal setup for Replit compatibility.
        Use Flask‚Äôs built-in server for easy execution.